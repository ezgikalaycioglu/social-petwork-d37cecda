import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { useToast } from '@/hooks/use-toast';
import { useAnalytics } from '@/hooks/useAnalytics';
import PhotoUpload from '@/components/PhotoUpload';
import MultiplePhotoUpload from '@/components/MultiplePhotoUpload';
import PersonalityTraitsSelector from '@/components/PersonalityTraitsSelector';
import { Heart } from 'lucide-react';

const petProfileSchema = z.object({
  name: z.string().min(1, 'Pet name is required').max(50, 'Pet name must be 50 characters or less'),
  age: z.string().optional(),
  gender: z.enum(['Male', 'Female', 'Unknown/Other']),
  breed: z.string().min(1, 'Breed is required').max(100, 'Breed must be 100 characters or less'),
  bio: z.string().max(500, 'Bio must be 500 characters or less').optional(),
  vaccinationStatus: z.enum(['Up-to-date', 'Not vaccinated', 'Unknown']),
});

type PetProfileForm = z.infer<typeof petProfileSchema>;

interface CreatePetProfileFormProps {
  onSuccess?: () => void;
  showHeader?: boolean;
}

const CreatePetProfileForm = ({ onSuccess, showHeader = true }: CreatePetProfileFormProps) => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const { trackEvent } = useAnalytics();
  const [profilePhotoUrl, setProfilePhotoUrl] = useState<string>('');
  const [photos, setPhotos] = useState<string[]>([]);
  const [personalityTraits, setPersonalityTraits] = useState<string[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<PetProfileForm>({
    resolver: zodResolver(petProfileSchema),
    defaultValues: {
      name: '',
      age: '',
      gender: 'Unknown/Other',
      breed: '',
      bio: '',
      vaccinationStatus: 'Unknown',
    },
  });

  const onSubmit = async (data: PetProfileForm) => {
    setIsSubmitting(true);
    
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        toast({
          title: "Authentication Required",
          description: "Please log in to create a pet profile.",
          variant: "destructive",
        });
        return;
      }

      const petData = {
        user_id: user.id,
        name: data.name,
        pet_username: data.name, // Will be auto-generated by trigger if needed
        age: data.age ? parseInt(data.age) : null,
        gender: data.gender,
        breed: data.breed,
        bio: data.bio || null,
        about: data.bio || null, // Keep for compatibility
        profile_photo_url: profilePhotoUrl || null,
        photos: photos.length > 0 ? photos : null,
        personality_traits: personalityTraits.length > 0 ? personalityTraits : null,
        vaccination_status: data.vaccinationStatus,
      };

      const { error } = await supabase
        .from('pet_profiles')
        .insert(petData);

      if (error) {
        throw error;
      }

      // Track analytics event with correct property names
      trackEvent('Pet Profile Created', {
        pet_breed: data.breed,
        pet_age: data.age ? parseInt(data.age) : undefined,
        pet_gender: data.gender,
        has_profile_photo: !!profilePhotoUrl,
        personality_traits_count: personalityTraits.length,
      });

      toast({
        title: "Success!",
        description: "Your pet profile has been created successfully.",
      });

      if (onSuccess) {
        onSuccess();
      } else {
        navigate('/my-pets');
      }
    } catch (error) {
      console.error('Error creating pet profile:', error);
      toast({
        title: "Error",
        description: "Failed to create pet profile. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="flex flex-col h-full max-h-[85vh]">
      {/* Sticky Header */}
      <div className="sticky top-0 z-10 bg-white/95 backdrop-blur px-5 py-3 border-b flex items-center justify-between">
        <div>
          <h2 className="text-lg font-semibold text-gray-900">Create New Pet Profile</h2>
          <p id="create-pet-description" className="text-xs text-gray-500">Add a new furry friend to your family</p>
        </div>
      </div>

      {/* Scrollable Content */}
      <div className="flex-1 overflow-y-auto">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} id="create-pet-form">
            {/* Profile Photo Section */}
            <section className="px-5 py-4">
              <div className="rounded-xl border border-gray-200 bg-gray-50 p-4">
                <div className="w-32 h-32 rounded-full bg-green-50/60 ring-1 ring-green-200 grid place-items-center mx-auto">
                  <PhotoUpload
                    currentPhotoUrl={profilePhotoUrl}
                    onPhotoUploaded={setProfilePhotoUrl}
                    bucketName="pet-photos"
                  />
                </div>
              </div>
            </section>

            {/* Pet Name */}
            <section className="px-5 py-4 border-t border-gray-100">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-sm font-medium text-gray-800">
                      Pet Name <span className="text-red-600">*</span>
                    </FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Enter your pet's name"
                        {...field}
                        className="mt-1 w-full rounded-lg border border-gray-200 bg-white h-10 px-3 text-gray-900 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary/40"
                      />
                    </FormControl>
                    <FormMessage className="mt-1 text-xs text-red-600" />
                  </FormItem>
                )}
              />
            </section>

            {/* Age */}
            <section className="px-5 py-4 border-t border-gray-100">
              <FormField
                control={form.control}
                name="age"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-sm font-medium text-gray-800">Age (optional)</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        placeholder="Age in years"
                        {...field}
                        className="mt-1 w-full rounded-lg border border-gray-200 bg-white h-10 px-3 text-gray-900 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary/40"
                      />
                    </FormControl>
                    <FormMessage className="mt-1 text-xs text-red-600" />
                  </FormItem>
                )}
              />
            </section>

            {/* Gender */}
            <section className="px-5 py-4 border-t border-gray-100">
              <FormField
                control={form.control}
                name="gender"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-sm font-medium text-gray-800">Gender</FormLabel>
                    <FormControl>
                      <div className="flex flex-wrap gap-3 mt-2" role="radiogroup" aria-label="Pet gender">
                        {(['Male', 'Female', 'Unknown/Other'] as const).map((gender) => (
                          <button
                            key={gender}
                            type="button"
                            role="radio"
                            aria-checked={field.value === gender}
                            data-checked={field.value === gender}
                            onClick={() => field.onChange(gender)}
                            className="inline-flex items-center gap-2 px-3 h-9 rounded-full border border-gray-200 bg-white hover:bg-gray-50 text-gray-700 text-sm data-[checked=true]:bg-primary/10 data-[checked=true]:border-primary/40 data-[checked=true]:text-primary focus:outline-none focus:ring-2 focus:ring-primary/30"
                          >
                            {gender}
                          </button>
                        ))}
                      </div>
                    </FormControl>
                    <FormMessage className="mt-1 text-xs text-red-600" />
                  </FormItem>
                )}
              />
            </section>

            {/* Breed */}
            <section className="px-5 py-4 border-t border-gray-100">
              <FormField
                control={form.control}
                name="breed"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-sm font-medium text-gray-800">
                      Breed or Mix <span className="text-red-600">*</span>
                    </FormLabel>
                    <FormControl>
                      <Input
                        placeholder="e.g., Golden Retriever, Mixed Breed"
                        {...field}
                        className="mt-1 w-full rounded-lg border border-gray-200 bg-white h-10 px-3 text-gray-900 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary/40"
                      />
                    </FormControl>
                    <FormMessage className="mt-1 text-xs text-red-600" />
                  </FormItem>
                )}
              />
            </section>

            {/* Bio */}
            <section className="px-5 py-4 border-t border-gray-100">
              <FormField
                control={form.control}
                name="bio"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-sm font-medium text-gray-800">Bio (optional)</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Tell us about your pet's personality..."
                        className="mt-1 w-full rounded-lg border border-gray-200 bg-white min-h-[90px] py-2 px-3 text-gray-900 placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary/40"
                        {...field}
                      />
                    </FormControl>
                    <p className="text-xs text-gray-500 mt-1">
                      {field.value?.length || 0}/500 characters
                    </p>
                    <FormMessage className="mt-1 text-xs text-red-600" />
                  </FormItem>
                )}
              />
            </section>

            {/* Vaccination Status */}
            <section className="px-5 py-4 border-t border-gray-100">
              <FormField
                control={form.control}
                name="vaccinationStatus"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-sm font-medium text-gray-800">Vaccination Status</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger className="mt-1 w-full rounded-lg border border-gray-200 bg-white h-10 text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary/40">
                          <SelectValue placeholder="Select vaccination status" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent className="bg-white border border-gray-200 shadow-lg z-50">
                        <SelectItem value="Up-to-date">Up-to-date</SelectItem>
                        <SelectItem value="Not vaccinated">Not vaccinated</SelectItem>
                        <SelectItem value="Unknown">Unknown</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage className="mt-1 text-xs text-red-600" />
                  </FormItem>
                )}
              />
            </section>

            {/* Personality Traits */}
            <section className="px-5 py-4 border-t border-gray-100">
              <label className="text-sm font-medium text-gray-800">Personality Traits (optional)</label>
              <div className="mt-2">
                <PersonalityTraitsSelector
                  selectedTraits={personalityTraits}
                  onTraitsChange={setPersonalityTraits}
                />
              </div>
            </section>

            {/* Additional Photos */}
            <section className="px-5 py-4 border-t border-gray-100">
              <label className="text-sm font-medium text-gray-800">Additional Photos (optional)</label>
              <div className="mt-2">
                <MultiplePhotoUpload
                  currentPhotos={photos}
                  onPhotosUploaded={setPhotos}
                  bucketName="pet-photos"
                />
              </div>
            </section>
          </form>
        </Form>
      </div>

      {/* Sticky Footer */}
      <div className="sticky bottom-0 z-10 bg-white/95 backdrop-blur px-5 py-3 border-t">
        <Button
          type="submit"
          form="create-pet-form"
          disabled={isSubmitting}
          className="w-full h-11 rounded-xl bg-green-600 text-white font-medium hover:bg-green-700 focus:ring-2 focus:ring-green-300 disabled:opacity-50"
        >
          {isSubmitting ? 'Creating Profile...' : 'Create Pet Profile'}
        </Button>
        <p className="text-xs text-gray-500 text-center mt-2">* Required fields</p>
      </div>
    </div>
  );
};

export default CreatePetProfileForm;